---
AWSTemplateFormatVersion: '2010-09-09'
Description: Continous Delivery of a Node App to a Serverless Hosting Stack

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Source"
        Parameters:
          - GitRepositoryName
          - GitBranchName
    ParameterLabels:
      GitRepositoryName:
        default: "CodeCommit Name"
      GitBranchName:
        default: "Branch"
      HostingStack:
        default: "Deploy to"


Parameters:
  Description:
    Description: Description to be recorded against some resources
    Type: String
  GitRepositoryName:
    Description: The CodeCommit repo name.
    Type: String
  GitBranchName:
    Description: Name of repository to use
    Type: String
    Default: "master"
  HostingStack:
    Description: The hosting stack to deploy the source to
    Type: String

Resources:

  InvalidateWebsiteCloudFront:
    Type: AWS::Lambda::Function
    Properties:
      Description: Invalidates a CloudFront distribution
      Handler: index.handler
      Role: !GetAtt InvalidateWebsiteCloudFrontExecutionRole.Arn
      Environment:
        Variables:
          DISTRIBUTION_ID:
            Fn::ImportValue:
              Fn::Sub:
                - ${HostingStack}-CloudfrontARN
                - HostingStack: !Ref HostingStack

      Runtime: nodejs6.10
      Code:
        ZipFile: !Sub |
          var AWS = require('aws-sdk');
          var cloudfront = new AWS.CloudFront();
          var ALL_OBJECTS = "/*"

          exports.handler = (event, context) => {

              var jobId = event["CodePipeline.job"].id;

              var codepipeline = new AWS.CodePipeline();

              // Notify AWS CodePipeline of a successful job
              var invalidateSuccess = function(message) {
                  var params = {
                      jobId: jobId
                  };
                  codepipeline.putJobSuccessResult(params, function(err, data) {
                      if(err) {
                          context.fail(err);
                      } else {
                          context.succeed(message);
                      }
                  });
              };

              // Notify AWS CodePipeline of a failed job
              var invalidateFail = function(message) {
                  var params = {
                      jobId: jobId,
                      failureDetails: {
                          message: JSON.stringify(message),
                          type: 'JobFailed',
                          externalExecutionId: context.invokeid
                      }
                  };
                  codepipeline.putJobFailureResult(params, function(err, data) {
                      context.fail(message);
                  });
              };

              var params = {
                DistributionId: process.env.DISTRIBUTION_ID,
                InvalidationBatch: {
                  CallerReference: jobId,
                  Paths: {
                    Quantity: 1,
                    Items: [
                      ALL_OBJECTS,
                    ]
                  }
                }
              };

              cloudfront.createInvalidation(params, function(err, data) {
                  if(err){
                      invalidateFail(err)
                  }else{
                      invalidateSuccess(data)
                  }
              });

          };

  InvalidateWebsiteCloudFrontExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-${AWS::StackName}-invalidation-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*

  BuildArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'code-build-${AWS::StackName}-artifacts'

  WebsiteCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Ref Description
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:6.3.1
        Type: LINUX_CONTAINER
      Name: String
      ServiceRole: !GetAtt WebsiteCodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE

  WebsiteCodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub 'code-build-${AWS::StackName}-service-role'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: !Sub 'code-build-${AWS::StackName}-policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${GitRepositoryName}'
                Action:
                  - codecommit:GitPull
              - Effect: Allow
                Resource:
                  - Fn::Sub:
                      - '${Bucket}/*'
                      - Bucket: !GetAtt BuildArtifactBucket.Arn
                Action:
                  - s3:PutObject
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource:
                  - Fn::Sub:
                      - ${Bucket}/*
                      - Bucket:
                          Fn::ImportValue:
                            Fn::Sub:
                              - ${HostingStack}-BucketARN
                              - HostingStack: !Ref HostingStack

  DeployPipeline:
    DependsOn:
      - WebsiteCodeBuild
      - InvalidateWebsiteCloudFront
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref BuildArtifactBucket
        Type: S3
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      Stages:
        # Gets the source from CodeCommit
        - Name: Source
          Actions:
            - Name: WebsiteSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: website-repository
              RunOrder: 1
              Configuration:
                RepositoryName: !Ref GitRepositoryName
                BranchName: !Ref GitBranchName
        # Runs CodeBuild to build the source with npm run build
        - Name: Build
          Actions:
            - Name: NodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: website-repository
              OutputArtifacts:
                - Name: website-build
              RunOrder: 2
              Configuration:
                ProjectName: !Ref WebsiteCodeBuild
        # Invalidates CloudFront to let new files show
        - Name: CleanUp
          Actions:
            - Name: InvalidateCloudfront
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              RunOrder: 3
              Configuration:
                FunctionName: !Ref InvalidateWebsiteCloudFront

  PipelineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub 'codepipeline-${AWS::StackName}-service-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Sub 'code-build-${AWS::StackName}-policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
                Resource: "*" # TODO: restrict access to scope
                Effect: Allow

              - Action:
                - s3:PutObject
                Resource:
                - arn:aws:s3:::codepipeline*
                - arn:aws:s3:::elasticbeanstalk*
                Effect: Allow

              - Action:
                - codecommit:CancelUploadArchive
                - codecommit:GetBranch
                - codecommit:GetCommit
                - codecommit:GetUploadArchiveStatus
                - codecommit:UploadArchive
                Resource: "*" # TODO: restrict access to scope
                Effect: Allow

              - Action:
                - codedeploy:CreateDeployment
                - codedeploy:GetApplicationRevision
                - codedeploy:GetDeployment
                - codedeploy:GetDeploymentConfig
                - codedeploy:RegisterApplicationRevision
                Resource: "*" # TODO: restrict access to scope
                Effect: Allow

              - Action:
                - elasticbeanstalk:*
                - ec2:*
                - elasticloadbalancing:*
                - autoscaling:*
                - cloudwatch:*
                - s3:*
                - sns:*
                - cloudformation:*
                - rds:*
                - sqs:*
                - ecs:*
                - iam:PassRole
                Resource: "*" # TODO: restrict
                Effect: Allow

              - Action:
                - lambda:InvokeFunction
                - lambda:ListFunctions
                Resource: "*" # TODO: restrict
                Effect: Allow

              - Action:
                - codebuild:BatchGetBuilds
                - codebuild:StartBuild
                Resource: "*" # TODO: restrict
                Effect: Allow
